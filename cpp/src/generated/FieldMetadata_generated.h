// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FIELDMETADATA_ORG_APACHE_ARROW_FLATBUF_H_
#define FLATBUFFERS_GENERATED_FIELDMETADATA_ORG_APACHE_ARROW_FLATBUF_H_

#include "flatbuffers/flatbuffers.h"

namespace org {
namespace apache {
namespace arrow {
namespace flatbuf {

struct FieldMetadata;
struct FieldMetadataBuilder;

struct FieldMetadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FieldMetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDEX = 4,
    VT_OFFSET = 6,
    VT_TOTAL_BYTES = 8,
    VT_LENGTH = 10,
    VT_TYPE = 12,
    VT_NULL_COUNT = 14
  };
  int64_t index() const {
    return GetField<int64_t>(VT_INDEX, 0);
  }
  int64_t offset() const {
    return GetField<int64_t>(VT_OFFSET, 0);
  }
  int64_t total_bytes() const {
    return GetField<int64_t>(VT_TOTAL_BYTES, 0);
  }
  int64_t length() const {
    return GetField<int64_t>(VT_LENGTH, 0);
  }
  int64_t type() const {
    return GetField<int64_t>(VT_TYPE, 0);
  }
  int64_t null_count() const {
    return GetField<int64_t>(VT_NULL_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_INDEX) &&
           VerifyField<int64_t>(verifier, VT_OFFSET) &&
           VerifyField<int64_t>(verifier, VT_TOTAL_BYTES) &&
           VerifyField<int64_t>(verifier, VT_LENGTH) &&
           VerifyField<int64_t>(verifier, VT_TYPE) &&
           VerifyField<int64_t>(verifier, VT_NULL_COUNT) &&
           verifier.EndTable();
  }
};

struct FieldMetadataBuilder {
  typedef FieldMetadata Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_index(int64_t index) {
    fbb_.AddElement<int64_t>(FieldMetadata::VT_INDEX, index, 0);
  }
  void add_offset(int64_t offset) {
    fbb_.AddElement<int64_t>(FieldMetadata::VT_OFFSET, offset, 0);
  }
  void add_total_bytes(int64_t total_bytes) {
    fbb_.AddElement<int64_t>(FieldMetadata::VT_TOTAL_BYTES, total_bytes, 0);
  }
  void add_length(int64_t length) {
    fbb_.AddElement<int64_t>(FieldMetadata::VT_LENGTH, length, 0);
  }
  void add_type(int64_t type) {
    fbb_.AddElement<int64_t>(FieldMetadata::VT_TYPE, type, 0);
  }
  void add_null_count(int64_t null_count) {
    fbb_.AddElement<int64_t>(FieldMetadata::VT_NULL_COUNT, null_count, 0);
  }
  explicit FieldMetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FieldMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FieldMetadata>(end);
    return o;
  }
};

inline flatbuffers::Offset<FieldMetadata> CreateFieldMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t index = 0,
    int64_t offset = 0,
    int64_t total_bytes = 0,
    int64_t length = 0,
    int64_t type = 0,
    int64_t null_count = 0) {
  FieldMetadataBuilder builder_(_fbb);
  builder_.add_null_count(null_count);
  builder_.add_type(type);
  builder_.add_length(length);
  builder_.add_total_bytes(total_bytes);
  builder_.add_offset(offset);
  builder_.add_index(index);
  return builder_.Finish();
}

inline const org::apache::arrow::flatbuf::FieldMetadata *GetFieldMetadata(const void *buf) {
  return flatbuffers::GetRoot<org::apache::arrow::flatbuf::FieldMetadata>(buf);
}

inline const org::apache::arrow::flatbuf::FieldMetadata *GetSizePrefixedFieldMetadata(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<org::apache::arrow::flatbuf::FieldMetadata>(buf);
}

inline bool VerifyFieldMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<org::apache::arrow::flatbuf::FieldMetadata>(nullptr);
}

inline bool VerifySizePrefixedFieldMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<org::apache::arrow::flatbuf::FieldMetadata>(nullptr);
}

inline void FinishFieldMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<org::apache::arrow::flatbuf::FieldMetadata> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFieldMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<org::apache::arrow::flatbuf::FieldMetadata> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuf
}  // namespace arrow
}  // namespace apache
}  // namespace org

#endif  // FLATBUFFERS_GENERATED_FIELDMETADATA_ORG_APACHE_ARROW_FLATBUF_H_
