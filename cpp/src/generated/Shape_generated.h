// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHAPE_ORG_APACHE_ARROW_FLATBUF_H_
#define FLATBUFFERS_GENERATED_SHAPE_ORG_APACHE_ARROW_FLATBUF_H_

#include "flatbuffers/flatbuffers.h"

namespace org {
namespace apache {
namespace arrow {
namespace flatbuf {

struct Shape;

struct Shape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM_ROWS = 4,
    VT_NUM_COLUMNS = 6
  };
  int64_t num_rows() const {
    return GetField<int64_t>(VT_NUM_ROWS, 0);
  }
  int64_t num_columns() const {
    return GetField<int64_t>(VT_NUM_COLUMNS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_NUM_ROWS) &&
           VerifyField<int64_t>(verifier, VT_NUM_COLUMNS) &&
           verifier.EndTable();
  }
};

struct ShapeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_num_rows(int64_t num_rows) {
    fbb_.AddElement<int64_t>(Shape::VT_NUM_ROWS, num_rows, 0);
  }
  void add_num_columns(int64_t num_columns) {
    fbb_.AddElement<int64_t>(Shape::VT_NUM_COLUMNS, num_columns, 0);
  }
  explicit ShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShapeBuilder &operator=(const ShapeBuilder &);
  flatbuffers::Offset<Shape> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Shape>(end);
    return o;
  }
};

inline flatbuffers::Offset<Shape> CreateShape(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t num_rows = 0,
    int64_t num_columns = 0) {
  ShapeBuilder builder_(_fbb);
  builder_.add_num_columns(num_columns);
  builder_.add_num_rows(num_rows);
  return builder_.Finish();
}

inline const org::apache::arrow::flatbuf::Shape *GetShape(const void *buf) {
  return flatbuffers::GetRoot<org::apache::arrow::flatbuf::Shape>(buf);
}

inline const org::apache::arrow::flatbuf::Shape *GetSizePrefixedShape(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<org::apache::arrow::flatbuf::Shape>(buf);
}

inline bool VerifyShapeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<org::apache::arrow::flatbuf::Shape>(nullptr);
}

inline bool VerifySizePrefixedShapeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<org::apache::arrow::flatbuf::Shape>(nullptr);
}

inline void FinishShapeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<org::apache::arrow::flatbuf::Shape> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedShapeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<org::apache::arrow::flatbuf::Shape> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuf
}  // namespace arrow
}  // namespace apache
}  // namespace org

#endif  // FLATBUFFERS_GENERATED_SHAPE_ORG_APACHE_ARROW_FLATBUF_H_
